-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Scrapes the GitHub events API
@package GitHubAPI
@version 0.1.0.0


-- | Data type declarations
module DataTypes

-- | A data type to handle API response for public repositories.
data RepoResponse
RepoResponse :: Integer -> String -> String -> RepoResponse
[$sel:id:RepoResponse] :: RepoResponse -> Integer
[$sel:languages_url:RepoResponse] :: RepoResponse -> String
[$sel:contributors_url:RepoResponse] :: RepoResponse -> String

-- | A data type for contributors with multiple constructors reflecting
--   different needs when encoding and decoding from JSON.
data Contributor
ContributorFrom :: String -> Contributor
[$sel:login:ContributorFrom] :: Contributor -> String
ContributorTo :: Integer -> Integer -> Contributor
[$sel:repoID:ContributorFrom] :: Contributor -> Integer
[$sel:contributors:ContributorFrom] :: Contributor -> Integer

-- | A data type for languages with multiple constructors reflecting
--   different needs when encoding and decoding from JSON.
data Language
LanguageFrom :: String -> Integer -> Language
[$sel:language:LanguageFrom] :: Language -> String
[$sel:lineCount:LanguageFrom] :: Language -> Integer
LanguageTo :: Integer -> String -> Integer -> Language
[$sel:langRepoID:LanguageFrom] :: Language -> Integer
[$sel:language:LanguageFrom] :: Language -> String
[$sel:lineCount:LanguageFrom] :: Language -> Integer

-- | A data type for extracting our derived table of total counts
data TotalCount
TotalCount :: String -> Integer -> Integer -> Double -> TotalCount
[$sel:totalLanguage:TotalCount] :: TotalCount -> String
[$sel:totalLineCount:TotalCount] :: TotalCount -> Integer
[$sel:totalContributors:TotalCount] :: TotalCount -> Integer
[$sel:linesPerContrib:TotalCount] :: TotalCount -> Double

-- | A data type for extracting our derived table of lines per contributor
data AvgContribLines
AvgContribLines :: Integer -> Double -> AvgContribLines
[$sel:repo:AvgContribLines] :: AvgContribLines -> Integer
[$sel:avgLinesPerContrib:AvgContribLines] :: AvgContribLines -> Double
instance GHC.Generics.Generic DataTypes.AvgContribLines
instance GHC.Show.Show DataTypes.AvgContribLines
instance GHC.Generics.Generic DataTypes.TotalCount
instance GHC.Show.Show DataTypes.TotalCount
instance GHC.Generics.Generic DataTypes.Language
instance GHC.Show.Show DataTypes.Language
instance GHC.Generics.Generic DataTypes.Contributor
instance GHC.Show.Show DataTypes.Contributor
instance GHC.Generics.Generic DataTypes.RepoResponse
instance GHC.Show.Show DataTypes.RepoResponse
instance Data.Aeson.Types.ToJSON.ToJSON DataTypes.AvgContribLines
instance Data.Aeson.Types.ToJSON.ToJSON DataTypes.TotalCount
instance Data.Aeson.Types.FromJSON.FromJSON DataTypes.Language
instance Data.Aeson.Types.ToJSON.ToJSON DataTypes.Language
instance Data.Aeson.Types.FromJSON.FromJSON DataTypes.Contributor
instance Data.Aeson.Types.ToJSON.ToJSON DataTypes.Contributor
instance Data.Aeson.Types.FromJSON.FromJSON DataTypes.RepoResponse
instance Data.Aeson.Types.ToJSON.ToJSON DataTypes.RepoResponse


-- | Database Operations
module DB

-- | Connect to the database and create all the tables.
connectDB :: IConnection conn => conn -> IO ()

-- | Initialise the database with a given path name.
initialiseDB :: FilePath -> IO Connection

-- | Extract response list from Either Left/Right as returned by
--   parseRepoResponse.
extractResp :: Either a1 [a2] -> [a2]

-- | Add RepoResponses to the "repoResponses" table in the database.
addRepo :: IConnection conn => conn -> Either a RepoResponse -> IO ()

-- | Recursively calls addRepo on a list of Either Error RepoResponse
--   objects.
addRepoMany :: IConnection conn => conn -> [Either String RepoResponse] -> IO ()

-- | Generalised function to retrieve and type convert an entire table from
--   the database SQL format to Haskell data types. Returns a list of a
--   given data type specified by the typeConverter parameter.
retrieveDB :: IConnection conn => conn -> [Char] -> ([SqlValue] -> b) -> IO [b]

-- | Adds a single contributor tuple (as provided by callContribURL in the
--   HTTP module) to the database.
addContribs :: IConnection conn => conn -> (Integer, Int) -> IO ()

-- | A recursive function adding a list of language tuples to the database
--   using addLang above.
addLangList :: IConnection conn => conn -> [(Integer, String, Integer)] -> IO ()

-- | Adds a single language tuple (as provided by callLangURL in the HTTP
--   module) to the database.
addLang :: IConnection conn => conn -> (Integer, String, Integer) -> IO ()

-- | SQL query that aggregates across all repositories and calculates the
--   total line count and total contributors for each language. This also
--   populates the total count table.
fillTotalCount :: IConnection conn => conn -> IO ()

-- | SQL query that calculates the average number of lines per contributor
--   for each repository. | This query then populates the LinesPerContrib
--   table.
fillLinesPerContrib :: IConnection conn => conn -> IO ()

-- | Takes a table name and its conveter (FromSQL), ecncodes the the list
--   then writes it out to a JSON file matching it's table name.
dbTableToJSON :: (IConnection conn, ToJSON b) => conn -> [Char] -> ([SqlValue] -> b) -> IO ()

-- | Type converter that allows us to extract items from the database as
--   RepoResponse objects.
repoFromSQL :: [SqlValue] -> RepoResponse

-- | Type converter that allows us to extract items from the database as
--   Contributor objects.
contribFromSQL :: [SqlValue] -> Contributor

-- | Type converter that allows us to extract items from the database as
--   Language objects.
langFromSQL :: [SqlValue] -> Language

-- | Type converter that allows us to extract items from the database as
--   TotalCount objects.
totalFromSQL :: [SqlValue] -> TotalCount

-- | Type converter that allows us to extract items from the database as
--   AvgContribLines objects.
avgContribFromSQL :: [SqlValue] -> AvgContribLines

-- | Finds and prints the top languages from the totalCount table by a
--   number of metrics (line count, most contributors, most average lines
--   per contributor).
topFiveLangs :: IConnection conn => conn -> IO ()

-- | Finds and prints the top repos by contributors from the
--   contributorResponses table.
topFiveContribs :: IConnection conn => conn -> IO ()

-- | Finds and prints the top repos by average lines per contributor from
--   the linesPerContrib table.
topLinesPerContrib :: IConnection conn => conn -> IO ()

-- | When printing the top five results from the totalCount at the end of
--   program execution, this function gets the relevant fields to display
--   from the DataTypes and prints them.
printResults :: [Char] -> [TotalCount] -> IO ()

-- | Gets the relevant fields and prints them for the top 5 repo's by
--   contributor.
printContribResults :: [Contributor] -> IO ()

-- | Gets the relevant fields and prints them for the top 5 repo's by
--   average lines per contributor.
printAvgLPCResults :: [AvgContribLines] -> IO ()

-- | Retrieve the repos from the DB between the requested start and end
--   repoID. This is so we call only the newly added languages_url and
--   contributors_url for repos specified in the current run. This allows
--   us to build up a database over time of many repos, language and
--   contributor responses, without duplicating API calls, given we can
--   only make 5000 API calls/hour.
retrieveRepoBetween :: (IConnection conn, Convertible a SqlValue) => conn -> a -> a -> IO [RepoResponse]


-- | Parsing Operations
module Parser

-- | Decodes raw JSON byteString from the repositories API call into a list
--   of RepoResponse objects.
parseRepoResponse :: ByteString -> IO (Either String [Either String RepoResponse])

-- | Parses a single decoded JSON value into an Either RepoResponse object.
parserRepo :: Value -> Parser (Either String RepoResponse)

-- | Decodes raw JSON byteString from the contributor API call into a list
--   of Contributor objects.
parseContribResponse :: Monad m => ByteString -> m (Either String [Either String Contributor])

-- | Parses a single decoded JSON value into an Either Contributor object.
parserContribs :: Value -> Parser (Either String Contributor)

-- | Decodes raw JSON byteString from the Language API call into a list of
--   Language objects.
parseLangResponse :: Monad m => ByteString -> m (Either String [Language])

-- | As the languages JSON had a varying number of unknown fields, albeit
--   in a structured format, our parser creates a list of Language objects
--   for each repository.
parserLanguages :: Value -> Parser [Language]

-- | Maps parserContribs to an array of JSON values and returns a list of
--   the parsed Contributor objects.
parserContribsMany :: Value -> Parser [Either String Contributor]

-- | Maps parserRepo to an array of JSON values and returns a list of the
--   parsed RepoResponse objects.
parserRepoMany :: Value -> Parser [Either String RepoResponse]


-- | HTTP Operations
module HTTP

-- | callAPI returns an API call as an Either e (Response ByteString) when
--   calling a given GitHub API URL. On a successful download, we can get
--   the JSON from the Response ByteString using getResponseBody. In the
--   case of an HTTP exception e.g. timeout, "e" will contain the
--   HttpException details.
callAPI :: Exception e => String -> IO (Either e (Response ByteString))

-- | Takes a RepoResponse and calls the API on the Contributor URL and
--   returns a tuple of repoID and contributor count.
callContribURL :: RepoResponse -> IO (Integer, Int)

-- | Takes a RepoResponse and calls the API on the languages URL and
--   returns a list of tuples of repoID, language and line count.
callLangURL :: RepoResponse -> IO [(Integer, String, Integer)]

-- | As the API only returns 100 repositories at once, getManyRepos
--   recursively calls callAPI for multiple blocks of 100 repositories. The
--   function takes a database to write to, and a start repository ID and
--   an end repository ID. The API is called via the URL
--   <a>http://api.github.com/repositories?since=</a> where we append a
--   repository ID to receive the 100 repositories since that ID.
getManyRepos :: IConnection conn => conn -> Integer -> Integer -> IO ()

-- | Error handling for callContribURL as parseContribResponse returns
--   Either.
removeEitherNum :: Num p => Either a p -> p

-- | Error handling for callLangURL when parseLangResponse is called as it
--   returns an Either[].
splitLangResp :: t -> Either a [Language] -> [(t, String, Integer)]
